apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    dottyLibraryPath = file(System.getenv("DOTTY_HOME") + "/lib")
    dottyLibraryFiles = files { dottyLibraryPath.listFiles() }
    dotcLibraryFiles = dottyLibraryFiles.filter { File f ->
        f.name.startsWith("scala-library") ||
        f.name.startsWith("scala-asm") ||
        f.name.startsWith("compiler-interface") ||
        f.name.startsWith("dotty-interfaces") ||
        f.name.startsWith("dotty-library") ||
        f.name.startsWith("dotty-compiler") ||
        f.name.startsWith("dotty-staging")
    }
    scalaSourceTree = fileTree(dir: "/src/main/scala", include: "**/*.scala")
    //jarLibraryTree = fileTree(dir: "/lib", include: "**/*.jar")
    targetDir = file("/target")
    classesDir = file("${targetDir}/classes")
    buildClasspath = files(dotcLibraryFiles, classesDir)
    runtimeClasspath = files(dottyLibraryFiles, classesDir)
}

clean.doLast {
    targetDir.deleteDir()
}

task compileDotty(type: JavaExec) {
    dependsOn compileJava

	description "Compile Scala source files"

    classpath buildClasspath
    String sources = scalaSourceTree.files.join("\" \"").replaceAll("\\\\", "/")

    main "dotty.tools.dotc.Main"

    jvmArgs "-Dscala.usejavacp=true", "-Dfile.encoding=UTF-8"

    //args "-version"
    args "-d", classesDir, sources
}

compileDotty.doFirst {
    if (!classesDir.exists()) classesDir.mkdirs()
}

sourceSets {
    main {
        java {
            buildDir targetDir
        }
    }
}

build {
    dependsOn compileDotty
}

run {
    dependsOn build

    classpath runtimeClasspath

    jvmArgs "-Dfile.encoding=UTF-8"

    main mainClassName
    args ''
    //systemProperty "message" "Hello"
}


repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
}